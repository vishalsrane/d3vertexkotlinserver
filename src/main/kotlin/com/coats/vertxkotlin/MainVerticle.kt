package com.coats.vertxkotlin

import com.coats.vertxkotlin.exceptions.InvalidRequestBodyException
import io.vertx.core.AbstractVerticle
import io.vertx.core.Handler
import io.vertx.core.Promise
import io.vertx.core.http.HttpHeaders
import io.vertx.core.http.HttpMethod
import io.vertx.ext.web.Router
import io.vertx.ext.web.RoutingContext
import io.vertx.ext.web.handler.BodyHandler
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.lang.Exception
import kotlin.random.Random

class MainVerticle : AbstractVerticle() {

  val numbersMap = mutableMapOf<Int, Person>()

  override fun start(startPromise: Promise<Void>) {
    var server = vertx.createHttpServer()
    server.requestHandler(createRouter()).listen(8080)
  }

  private fun createRouter() = Router.router(vertx).apply {
    route().handler(BodyHandler.create())
    post("/person").consumes("application/json").produces("application/json").handler(createPersonHandler)
    post("/person").consumes("application/json").produces("application/json").failureHandler(failureHandler)
    get("/person/:id").produces("application/json").handler(getPersonHandler)
    get("/person/:id").produces("application/json").failureHandler(failureHandler)
  }

  private fun toPerson(name: String) : Person{
    return Json.parse(Person.serializer(), name)
  }

  private fun toPersonJson(person: Person): String {
    return Json.stringify(Person.serializer(), person)
  }

  private val createPersonHandler = Handler<RoutingContext>{
    routingContext ->
    var jsonBody = routingContext.bodyAsJson
    if(jsonBody.containsKey("id")){
      routingContext.fail(400, InvalidRequestBodyException("Id field is autogenerated and " +
        "hence it should not be passed in method body"))
    }else{
      var stringBody = routingContext.bodyAsString
      var person = toPerson(stringBody)
      person.id = Random.nextInt(1, 10000)
      var response = routingContext.response()
      response.putHeader("content-type", "application/json")
      response.statusCode = 201
      response.end(toPersonJson(person))
      numbersMap[person.id] = person
    }
  }

  private val getPersonHandler = Handler<RoutingContext>{
    routingContext ->
    var request = routingContext.request()
    val id = request.getParam("id")
    var intId :Int =0
    try {
      intId = Integer.parseInt(id)
    }catch (e : NumberFormatException){
      routingContext.fail(404, InvalidRequestBodyException("Id is invalid"))
    }
    var person = numbersMap[intId]
    if (person != null){
      routingContext.response().setStatusCode(200)
        .end(toPersonJson(person!!))
    }else{
      routingContext.fail(404, InvalidRequestBodyException("user with id ${intId} not found"))
    }

  }

  private val failureHandler = Handler<RoutingContext> { routingContext ->
    routingContext.response().putHeader(HttpHeaders.CONTENT_TYPE,"application/json; charset=utf-8")
                             .setStatusCode(routingContext.statusCode())
                             .end(Json.stringify(ErrorResponse.serializer(), ErrorResponse(routingContext.failure().message)))
  }
}

@Serializable
data class Person(val name: String){
  var id: Int = 0
}

@Serializable
data class ErrorResponse(val errorMessage: String?)
